#!/usr/bin/env bash

base=$(basename "$0")
usage="Usage: $base [COMMAND]
Utility to help manage the video player.

COMMANDS

  run | dev           Runs both the API and UI in new terminal tabs. For DEBUG USE ONLY.
                      Subcommands:
                        ui    Runs just the UI in another tab.
                        api   Runs just the API in another tab.

  users | user | u    Lists the allowed users for the app.
                      Subcommands:
                        add | update           Adds or updates a user to the allowable list. Prompts user for user_id.
                        add | update <user_id> admin   Adds or updates a user as an admin.
                        remove | delete          Removes a user from the allowable list. Prompts for user_id.
                        remove | delete <user_id>    Removes a user from the allowable list.

  roles | role | r    Lists the allowed roles for the app.
                      Subcommands:
                        add | update           Adds or updates a role to the allowable list. Prompts user for guild and role.
                        add | update <guild> <role>    Adds or updates a role to the allowable list.
                        remove | delete          Removes a role from the allowable list. Prompts for guild and role.
                        remove | delete <guild> <role>   Removes a role from the allowable list.

EXAMPLES
  $base run         Runs both the API and UI apps in their own terminal tabs.
  $base run api       Run just the API in a new tab.
"

script_path="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
cd $script_path
arg1=$1
arg2=$2
arg3=$3
arg4=$4
[ -v 1 ] && unset 1
[[ -v 2 ]] && unset 2
[[ -v 3 ]] && unset 3
[[ -v 4 ]] && unset 4

install() {
  sudo apt-get install libleveldb-dev
  pip3 install -r ./requirements
}

run_api() {
  # Set necessary environmental variables.
  [[ -e ".env" ]] && . .env
  export FLASK_APP=api.main
  [[ -v PORT ]] && port=$PORT || port=5102

  local options=''

  # Use TLS if cert provided.
  if [[ -v CERT_FILE && -v KEY_FILE ]]
  then
    options="--cert=$CERT_FILE --key=$KEY_FILE"
  fi
  
  # Run dev instance of the api.
  flask run --port=$port $options
}

run_client() {
  cd client/
  pnpm run start
}

exec_util() {
  python3 -c "import api.utility as u; $1"
}

command_exists() {
  echo "$(type $1 >/dev/null 2>&1 && echo 'y')"
}

prompt() {
  local val
  if [[ -v 2 ]]
  then
    val="$2"
  else
    echo -n "$1: " >&2
    read val
  fi

  echo "$val"
}

case "$arg1" in
  install | setup)
    install
    hash -p "$script_path/$base" "$base"
  ;;
  dev | run)
    export STAGE=DEVELOPMENT
    
    # GNOME desktop environment.
    if [[ -n $(command_exists "gnome-terminal") ]]
    then
      go() {
        # Make functions available in bash for new gnome tabs.
        export -f install
        export -f run_api
        export -f run_client
        
        gnome-terminal --tab -q -- bash -c "$1; bash"
      }

    # MacOS.
    elif [[ -n $(command_exists "osascript") ]]
    then
      go() {
        osascript -e 'tell application "Terminal" to activate' \
          -e 'tell application "System Events" to tell process "Terminal" to keystroke "t" using command down' \
          -e "tell application \"Terminal\" to do script \"$script_path/$base self-run $1\" in selected tab of the front window"
      }

    # Unsupported.
    else
      echo "No supported terminal available."
      exit
    fi

    # Attempt to perform action.
    case "$arg2" in
      api)
        go 'run_api'
      ;;
      ui)
        go 'run_client'
      ;;
      *)
        go 'run_api'
        go 'run_client'
      ;;
    esac
  ;;
  self-run)
    case "$arg2" in
      api | run_api)
        run_api
      ;;
      ui | run_client)
        run_client
      ;;
    esac
  ;;
  users | user | u)
    case "$arg2" in
      add | update)
        user_id=$(prompt "user_id" $arg3)
        [[ "$arg4" == "admin" ]] && admin="True" || admin="False"
        func="u.put_user('$user_id', $admin)"
      ;;
      delete | remove)
        user_id=$(prompt "user_id" $arg3)
        func="u.delete_user('$user_id')"
      ;;
      *)
        func="u.list_users()"
      ;;
    esac
  ;;
  roles | role | r)

  ;;
  deploy)
    if [[ -e '.env.deploy' ]]
    then
      . .env.deploy
    fi

    export REACT_APP_SITE_DOMAIN=$SITE_URL
    export REACT_APP_API_URL=$API_URL
    export REACT_APP_BANNER_URL=$BANNER_URL

    cd ./client/

    pnpm install
    pnpm test
    pnpm run build

    if [[ "$arg2" = 'dev' ]]
    then
      echo 'Creating a development build.'
      pnpm run build-ssr-dev
    else
      pnpm run build-ssr
    fi

    cd ../cdk/
    pnpm install
    pnpm run build
    pnpm cdk deploy
  ;;
  test)
    cd ./client/

    pnpm test
  ;;
  *)
    echo "$usage"
    exit
  ;;
esac

# Execute any requested commands.
if [[ -v func ]]
then
  exec_util "$func"
fi